name: Conan Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to publish'
        required: false
        type: string
      remote:
        description: 'Conan remote'
        required: true
        default: 'artifactory'
        type: choice
        options:
          - artifactory
          - conancenter

jobs:
  publish:
    strategy:
      fail-fast: false
      matrix:
        include:
          - profile: "linux-x64"
            os: ubuntu-lates
            arch: x86_64
          - profile: "macos-arm64"
            os: macos-lates
            arch: armv8
          - profile: "macos-x64"
            os: macos-lates
            arch: x86_64
          - profile: "windows-x64"
            os: windows-lates
            arch: x86_64

    runs-on: ${{ matrix.os }}
    name: "Publish ${{ matrix.profile }}"

    steps:
      - name: Checkou
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install "conan>=2.0.0"

      - name: Configure Conan (Unix)
        if: runner.os != 'Windows'
        run: |
          conan profile detect --force
          mkdir -p ~/.conan2/profiles

          if [[ "${{ matrix.profile }}" == "macos-"* ]]; then
            cat > ~/.conan2/profiles/release << 'EOF'
          [settings]
          os=Macos
          arch=${{ matrix.arch }}
          compiler=apple-clang
          compiler.version=15
          compiler.libcxx=libc++
          build_type=Release
          [buildenv]
          CC=clang
          CXX=clang++
          EOF
          elif [[ "${{ matrix.profile }}" == "linux-"* ]]; then
            cat > ~/.conan2/profiles/release << 'EOF'
          [settings]
          os=Linux
          arch=${{ matrix.arch }}
          compiler=gcc
          compiler.version=11
          compiler.libcxx=libstdc++11
          build_type=Release
          EOF
          fi

      - name: Configure Conan (Windows)
        if: runner.os == 'Windows'
        run: |
          conan profile detect --force
          New-Item -ItemType Directory -Force -Path ~/.conan2/profiles
          echo "[settings]" > ~/.conan2/profiles/release
          echo "os=Windows" >> ~/.conan2/profiles/release
          echo "arch=${{ matrix.arch }}" >> ~/.conan2/profiles/release
          echo "compiler=msvc" >> ~/.conan2/profiles/release
          echo "compiler.version=193" >> ~/.conan2/profiles/release
          echo "compiler.runtime=dynamic" >> ~/.conan2/profiles/release
          echo "build_type=Release" >> ~/.conan2/profiles/release

      - name: Install build tools (Linux)
        if: startsWith(matrix.profile, 'linux-')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config

      - name: Install build tools (macOS)
        if: startsWith(matrix.profile, 'macos-')
        run: |
          brew install cmake pkg-config

      - name: Setup Conan remotes
        run: |
          conan remote add artifactory ${{ secrets.CONAN_REMOTE_URL }} --force
          conan remote add conancenter https://center.conan.io --force

      - name: Authenticate with Artifactory
        run: |
          conan remote login artifactory ${{ secrets.CONAN_USER }} -p ${{ secrets.CONAN_PASSWORD }}

      - name: Create and upload packages
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"

          # Build dependencies first and upload missing ones
          echo "Building dependencies and uploading missing packages..."
          conan install . --profile:build=release --profile:host=release --build=missing

          # Upload any newly built dependencies to artifactory
          conan list "*:*" --format=compact | grep -v "libre/" | while read pkg; do
            if [ ! -z "$pkg" ]; then
              echo "Uploading dependency: $pkg"
              conan upload "$pkg" -r artifactory -c || echo "Failed to upload $pkg, continuing..."
            fi
          done

          # Build main configuration (OpenSSL)
          echo "Building main configuration with OpenSSL..."
          conan create . --name=libre --version=${VERSION}
            --profile:build=release --profile:host=release
            --build=missing

          # Upload the libre package
          conan upload "libre/${VERSION}@" -r artifactory -c

          # Build alternative configuration (MbedTLS) - if not Windows
          if [[ "${{ matrix.profile }}" != "windows-x64" ]]; then
            echo "Building alternative configuration with MbedTLS..."
            conan create . --name=libre --version=${VERSION}
              --profile:build=release --profile:host=release
              -o libre/*:with_mbedtls=True
              -o libre/*:with_openssl=False
              --build=missing

            # Upload MbedTLS varian
            conan upload "libre/${VERSION}@" -r artifactory -c
          fi

      - name: Publish summary
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"
          echo "Published libre/${VERSION} for ${{ matrix.profile }} to ${{ inputs.remote }}"