name: Publish Libre Conan Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to publish'
        required: true
        default: '4.0.0'
      remote:
        description: 'Conan remote to publish to'
        required: true
        default: 'conancenter'
        type: choice
        options:
          - conancenter
          - artifactory
          - custom

env:
  CONAN_NON_INTERACTIVE: 1

jobs:
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            profile: "linux-x64"
          - os: macos-latest  
            arch: armv8
            profile: "macos-arm64"
          - os: macos-latest
            arch: x86_64
            profile: "macos-x64"
          - os: windows-latest
            arch: x86_64
            profile: "windows-x64"
            
    name: "Build & Upload ${{ matrix.profile }}"
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Conan
      run: |
        python -m pip install --upgrade pip
        pip install "conan>=2.0.0"
        
    - name: Configure Conan (Unix)
      if: runner.os != 'Windows'
      run: |
        conan profile detect --force
        mkdir -p ~/.conan2/profiles
        
        if [[ "${{ matrix.profile }}" == "macos-"* ]]; then
          cat > ~/.conan2/profiles/release << 'EOF'
        [settings]
        os=Macos
        arch=${{ matrix.arch }}
        compiler=apple-clang
        compiler.version=15
        compiler.libcxx=libstdc++11
        build_type=Release
        [buildenv]
        CC=clang
        CXX=clang++
        EOF
        elif [[ "${{ matrix.profile }}" == "linux-"* ]]; then
          cat > ~/.conan2/profiles/release << 'EOF'
        [settings]
        os=Linux
        arch=${{ matrix.arch }}
        compiler=gcc
        compiler.version=11
        compiler.libcxx=libstdc++11
        build_type=Release
        EOF
        fi
        
    - name: Configure Conan (Windows)
      if: runner.os == 'Windows'
      run: |
        conan profile detect --force
        mkdir -p ~/.conan2/profiles
        echo "[settings]" > ~/.conan2/profiles/release
        echo "os=Windows" >> ~/.conan2/profiles/release
        echo "arch=${{ matrix.arch }}" >> ~/.conan2/profiles/release
        echo "compiler=msvc" >> ~/.conan2/profiles/release
        echo "compiler.version=193" >> ~/.conan2/profiles/release
        echo "compiler.runtime=dynamic" >> ~/.conan2/profiles/release
        echo "build_type=Release" >> ~/.conan2/profiles/release
        
    - name: Install system dependencies (Linux)
      if: matrix.profile == 'linux-x64'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libssl-dev \
          zlib1g-dev
          
    - name: Install system dependencies (macOS)
      if: startsWith(matrix.profile, 'macos-')
      run: |
        brew install cmake pkg-config openssl zlib
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
        
    - name: Setup Conan remote
      run: |
        # Configure remote based on input
        if [[ "${{ inputs.remote }}" == "conancenter" ]]; then
          conan remote add conancenter https://center.conan.io
        elif [[ "${{ inputs.remote }}" == "artifactory" ]]; then
          # Configure your artifactory remote here
          echo "Setting up Artifactory remote..."
          # conan remote add artifactory https://your-artifactory-url/artifactory/api/conan/conan
        fi
        
    - name: Create and upload packages
      run: |
        VERSION="${{ inputs.version || github.ref_name }}"
        
        # Build main configuration (OpenSSL)
        echo "Building main configuration with OpenSSL..."
        conan create . --name=libre --version=${VERSION} \
          --profile:build=release --profile:host=release \
          --build=missing
          
        # Build alternative configuration (MbedTLS) - if not Windows
        if [[ "${{ matrix.profile }}" != "windows-x64" ]]; then
          echo "Building alternative configuration with MbedTLS..."
          conan create . --name=libre --version=${VERSION} \
            --profile:build=release --profile:host=release \
            -o libre/*:with_mbedtls=True \
            -o libre/*:with_openssl=False \
            --build=missing
        fi
        
        # Build shared library version
        echo "Building shared library configuration..."
        conan create . --name=libre --version=${VERSION} \
          --profile:build=release --profile:host=release \
          -o libre/*:shared=True \
          --build=missing
          
    - name: Upload to remote
      if: inputs.remote != 'custom'
      env:
        CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
        CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
      run: |
        VERSION="${{ inputs.version || github.ref_name }}"
        REMOTE="${{ inputs.remote }}"
        
        # Login to remote if credentials are available
        if [[ -n "$CONAN_LOGIN_USERNAME" && -n "$CONAN_PASSWORD" ]]; then
          echo "Logging in to $REMOTE..."
          conan remote login $REMOTE $CONAN_LOGIN_USERNAME -p $CONAN_PASSWORD
        fi
        
        # Upload all packages for this version
        echo "Uploading libre/${VERSION} packages to $REMOTE..."
        conan upload libre/${VERSION} --all -r $REMOTE
        
    - name: Package verification
      run: |
        VERSION="${{ inputs.version || github.ref_name }}"
        echo "=== Package Verification ==="
        conan list libre/${VERSION}:*
        
        # Test installation
        mkdir test-install && cd test-install
        cat > conanfile.txt << 'EOF'
        [requires]
        libre/${{ inputs.version || github.ref_name }}
        [generators]
        CMakeDeps
        EOF
        
        conan install . --profile:host=release --build=missing
        echo "âœ… Package installation test passed"

  # Summary job
  summary:
    needs: publish
    if: always()
    runs-on: ubuntu-latest
    name: "Publish Summary"
    
    steps:
    - name: Summary
      run: |
        VERSION="${{ inputs.version || github.ref_name }}"
        REMOTE="${{ inputs.remote }}"
        
        echo "## ðŸ“¦ Libre Conan Package Published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Package Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`libre/${VERSION}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Remote**: \`${REMOTE}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: Linux, macOS (arm64 & x86_64), Windows" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Install the package" >> $GITHUB_STEP_SUMMARY
        echo "conan install libre/${VERSION}@ --build=missing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Or add to conanfile.txt" >> $GITHUB_STEP_SUMMARY
        echo "[requires]" >> $GITHUB_STEP_SUMMARY
        echo "libre/${VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configurations Available" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ”’ **OpenSSL** (default) or **MbedTLS**" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“š **Static** (default) or **Shared** libraries" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“± **Protocol support**: SIP, BFCP, PCP, RTMP" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“¦ **Compression**: ZLIB support" >> $GITHUB_STEP_SUMMARY