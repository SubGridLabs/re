name: Android

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  openssl: 3.2.1
  toolchain: toolchains/llvm/prebuilt/linux-x86_64
  api: 28
  abi: x86

jobs:
  android:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - uses: actions/cache@v4
      id: openssl
      with:
        path: openssl
        key: ${{ runner.os }}-android-${{ env.abi }}-openssl-${{ env.openssl }}

    - name: "build openssl"
      if: steps.openssl.outputs.cache-hit != 'true'
      run: |
        echo "Building OpenSSL for Android ABI: $abi, API: $api"
        wget -q https://www.openssl.org/source/openssl-$openssl.tar.gz
        tar -xzf openssl-$openssl.tar.gz
        mv openssl-$openssl openssl
        cd openssl
        export ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME
        export PATH=$ANDROID_NDK_LATEST_HOME/$toolchain/bin:$PATH
        ./Configure android-$abi no-shared no-tests -U__ANDROID_API__ -D__ANDROID_API__=$api
        make build_libs
        cd ..

    - name: build
      # unixsock is not currently supported on Android as only abstract (not pathname) addresses are allowed
      run: |
        echo "Building for Android ABI: $abi, API: $api"
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake \
              -DANDROID_ABI="$abi" \
              -DANDROID_PLATFORM=android-$api \
              -DOPENSSL_ROOT_DIR=openssl \
              -DOPENSSL_INCLUDE_DIR=openssl/include \
              -DOPENSSL_CRYPTO_LIBRARY=openssl/libcrypto.a \
              -DOPENSSL_SSL_LIBRARY=openssl/libssl.a \
              -DUSE_UNIXSOCK=OFF \
              -DCMAKE_BUILD_TYPE=Release .
        cmake --build . -j 4 -t retest

    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ env.abi }}-${{ env.api }}

    - name: create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2.34.0
      with:
        api-level: ${{ env.api }}
        arch: ${{ env.abi }}
        target: google_apis
        force-avd-creation: false
        emulator-boot-timeout: 300
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: run
      uses: reactivecircus/android-emulator-runner@v2.34.0
      with:
        api-level: ${{ env.api }}
        arch: ${{ env.abi }}
        target: google_apis
        force-avd-creation: false
        emulator-boot-timeout: 300
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
        disable-animations: true
        # Use test data directory as a writeable directory for I/O tests as the emulator file system is not generally writeable
        script: |
          echo "=== Android emulator status ==="
          adb devices
          adb shell getprop ro.build.version.sdk
          adb shell getprop ro.product.cpu.abi
          echo "=== Pushing test files ==="
          adb push test/retest /data/local/tmp/retest
          adb shell chmod 775 /data/local/tmp/retest
          adb push test/data /data/local/tmp/retest-data
          adb shell chmod 775 /data/local/tmp/retest-data
          echo "=== Finding and pushing libc++ ==="
          echo "Looking for libc++_shared.so in NDK..."
          find $ANDROID_NDK_LATEST_HOME -name "libc++_shared.so" | head -5
          echo "Architecture: ${{ env.abi }}"
          
          # Use the correct path for x86 architecture (i686-linux-android)
          LIBCPP_PATH="$ANDROID_NDK_LATEST_HOME/${{ env.toolchain }}/sysroot/usr/lib/i686-linux-android/libc++_shared.so"
          echo "Trying path: $LIBCPP_PATH"
          
          # Test if the file exists and push it
          test -f "$LIBCPP_PATH" && echo "Found libc++_shared.so at: $LIBCPP_PATH" || echo "File not found at expected path"
          test -f "$LIBCPP_PATH" && adb push "$LIBCPP_PATH" /data/local/tmp/libc++_shared.so || echo "Skipping libc++ push - file not found"
          echo "=== Running tests ==="
          adb shell HOME=/data/local/tmp LD_LIBRARY_PATH=/data/local/tmp /data/local/tmp/retest -r -v -d /data/local/tmp/retest-data
