name: Conan CI

on:
  push:
    branches: ["main", "conan-packaging"]
  pull_request:
    branches: ["main", "conan-packaging"]

env:
  CONAN_V2_MODE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - profile: "linux-x64"
            os: ubuntu-lates
            arch: x86_64
            build_type: Release
          - profile: "macos-arm64"
            os: macos-lates
            arch: armv8
            build_type: Release
          - profile: "macos-x64"
            os: macos-lates
            arch: x86_64
            build_type: Release
          - profile: "windows-x64"
            os: windows-lates
            arch: x86_64
            build_type: Release

    runs-on: ${{ matrix.os }}
    name: "${{ matrix.profile }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install "conan>=2.0.0"

      - name: Configure Conan (Unix)
        if: runner.os != 'Windows'
        run: |
          conan profile detect --force
          mkdir -p ~/.conan2/profiles

          if [[ "${{ matrix.profile }}" == "macos-"* ]]; then
            cat > ~/.conan2/profiles/ci << 'EOF'
          [settings]
          os=Macos
          arch=${{ matrix.arch }}
          compiler=apple-clang
          compiler.version=15
          compiler.libcxx=libc++
          build_type=${{ matrix.build_type }}
          [buildenv]
          CC=clang
          CXX=clang++
          EOF
          elif [[ "${{ matrix.profile }}" == "linux-"* ]]; then
            cat > ~/.conan2/profiles/ci << 'EOF'
          [settings]
          os=Linux
          arch=${{ matrix.arch }}
          compiler=gcc
          compiler.version=11
          compiler.libcxx=libstdc++11
          build_type=${{ matrix.build_type }}
          EOF
          fi

      - name: Configure Conan (Windows)
        if: runner.os == 'Windows'
        run: |
          conan profile detect --force
          New-Item -ItemType Directory -Force -Path ~/.conan2/profiles
          echo "[settings]" > ~/.conan2/profiles/ci
          echo "os=Windows" >> ~/.conan2/profiles/ci
          echo "arch=${{ matrix.arch }}" >> ~/.conan2/profiles/ci
          echo "compiler=msvc" >> ~/.conan2/profiles/ci
          echo "compiler.version=193" >> ~/.conan2/profiles/ci
          echo "compiler.runtime=dynamic" >> ~/.conan2/profiles/ci
          echo "build_type=${{ matrix.build_type }}" >> ~/.conan2/profiles/ci

      - name: Install build tools (Linux)
        if: startsWith(matrix.profile, 'linux-')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config

      - name: Install build tools (macOS)
        if: startsWith(matrix.profile, 'macos-')
        run: |
          brew install cmake pkg-config

      - name: Setup Conan remotes
        run: |
          conan remote add artifactory ${{ secrets.CONAN_REMOTE_URL }} --force
          conan remote add conancenter https://center.conan.io --force
      - name: Authenticate with Artifactory
        run: |
          conan remote login artifactory ${{ secrets.CONAN_USER }} -p ${{ secrets.CONAN_PASSWORD }}

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ~/.conan2
          key: conan-libre-${{ matrix.profile }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            conan-libre-${{ matrix.profile }}-
            conan-libre-

      - name: Build dependencies and upload missing packages (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Building dependencies and uploading missing packages..."
          conan install . --profile:build=ci --profile:host=ci --build=missing

          # Upload any newly built dependencies to artifactory
          conan list "*:*" --format=compact | grep -v "libre/" | while read pkg; do
            if [ ! -z "$pkg" ]; then
              echo "Uploading dependency: $pkg"
              conan upload "$pkg" -r artifactory -c || echo "Failed to upload $pkg, continuing..."
            fi
          done

      - name: Build dependencies and upload missing packages (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Building dependencies and uploading missing packages..."
          # Install dependencies, building missing ones
          conan install . --profile:build=ci --profile:host=ci --build=missing
          
          # Upload any newly built dependencies to artifactory
          $packages = conan list "*:*" --format=compact | Where-Object { $_ -notmatch "libre/" }
          foreach ($pkg in $packages) {
            if ($pkg) {
              echo "Uploading dependency: $pkg"
              conan upload "$pkg" -r artifactory -c
              if ($LASTEXITCODE -ne 0) {
                echo "Failed to upload $pkg, continuing..."
              }
            }
          }

      - name: Test OpenSSL configuration (default)
        run: |
          echo "Testing with OpenSSL (default configuration)..."
          conan create . --profile:build=ci --profile:host=ci --build=missing

          # Upload the libre package
          conan upload "libre/*" -r artifactory -c

      - name: Test MbedTLS configuration
        if: matrix.profile != 'windows-x64'
        run: |
          echo "Testing with MbedTLS instead of OpenSSL..."
          conan create . --profile:build=ci --profile:host=ci
            -o libre/*:with_mbedtls=True
            -o libre/*:with_openssl=False
            --build=missing

          # Upload the MbedTLS varian
          conan upload "libre/*" -r artifactory -c

      - name: Test minimal configuration
        run: |
          echo "Testing minimal configuration..."
          conan create . --profile:build=ci --profile:host=ci
            -o libre/*:with_bfcp=False
            -o libre/*:with_pcp=False
            -o libre/*:with_rtmp=False
            -o libre/*:with_zlib=False
            --build=missing

          # Upload the minimal varian
          conan upload "libre/*" -r artifactory -c

      - name: Package information
        run: |
          echo "=== Conan Package Info ==="
          conan list libre/4.0.0:*

  quality:
    runs-on: ubuntu-lates
    name: "Quality Checks"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install tools
        run: |
          pip install conan yamllin

      - name: Validate Conan recipe
        run: |
          conan export . --name=libre --version=4.0.0

      - name: Check workflow syntax
        run: |
          yamllint .github/workflows/conan-*.yml

  summary:
    needs: [build, quality]
    if: always()
    runs-on: ubuntu-lates
    name: "Build Summary"

    steps:
      - name: Summary
        run: |
          echo "## ðŸš€ Libre Conan CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platform Support" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… macOS (arm64 & x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Windows (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Linux (x86_64)" >> $GITHUB_STEP_SUMMARY
